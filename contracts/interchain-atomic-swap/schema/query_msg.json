{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "Show all open swaps. Return type is ListResponse.",
      "type": "object",
      "required": [
        "list"
      ],
      "properties": {
        "list": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "order": {
              "type": [
                "string",
                "null"
              ]
            },
            "start_after": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "list_by_desired_taker"
      ],
      "properties": {
        "list_by_desired_taker": {
          "type": "object",
          "required": [
            "desired_taker"
          ],
          "properties": {
            "desired_taker": {
              "type": "string"
            },
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "list_by_maker"
      ],
      "properties": {
        "list_by_maker": {
          "type": "object",
          "required": [
            "maker"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "maker": {
              "type": "string"
            },
            "start_after": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "list_by_taker"
      ],
      "properties": {
        "list_by_taker": {
          "type": "object",
          "required": [
            "taker"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "taker": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns the details of the named swap, error if not created. Return type: DetailsResponse.",
      "type": "object",
      "required": [
        "details"
      ],
      "properties": {
        "details": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bid_by_amount"
      ],
      "properties": {
        "bid_by_amount": {
          "type": "object",
          "required": [
            "order",
            "status"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "order": {
              "type": "string"
            },
            "start_after": {
              "anyOf": [
                {
                  "$ref": "#/definitions/BidOffset"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "$ref": "#/definitions/BidStatus"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bid_by_amount_reverse"
      ],
      "properties": {
        "bid_by_amount_reverse": {
          "type": "object",
          "required": [
            "order",
            "status"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "order": {
              "type": "string"
            },
            "start_before": {
              "anyOf": [
                {
                  "$ref": "#/definitions/BidOffset"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "$ref": "#/definitions/BidStatus"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bidby_order"
      ],
      "properties": {
        "bidby_order": {
          "type": "object",
          "required": [
            "order",
            "status"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "order": {
              "type": "string"
            },
            "start_after": {
              "anyOf": [
                {
                  "$ref": "#/definitions/BidOffsetTime"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "$ref": "#/definitions/BidStatus"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bidby_order_reverse"
      ],
      "properties": {
        "bidby_order_reverse": {
          "type": "object",
          "required": [
            "order",
            "status"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "order": {
              "type": "string"
            },
            "start_before": {
              "anyOf": [
                {
                  "$ref": "#/definitions/BidOffsetTime"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "$ref": "#/definitions/BidStatus"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bid_details"
      ],
      "properties": {
        "bid_details": {
          "type": "object",
          "required": [
            "bidder",
            "order"
          ],
          "properties": {
            "bidder": {
              "type": "string"
            },
            "order": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bid_by_bidder"
      ],
      "properties": {
        "bid_by_bidder": {
          "type": "object",
          "required": [
            "bidder",
            "status"
          ],
          "properties": {
            "bidder": {
              "type": "string"
            },
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "string",
                "null"
              ]
            },
            "status": {
              "$ref": "#/definitions/BidStatus"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Inactive fields query",
      "type": "object",
      "required": [
        "inactive_list"
      ],
      "properties": {
        "inactive_list": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "order": {
              "type": [
                "string",
                "null"
              ]
            },
            "start_after": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "inactive_list_by_desired_taker"
      ],
      "properties": {
        "inactive_list_by_desired_taker": {
          "type": "object",
          "required": [
            "desired_taker"
          ],
          "properties": {
            "desired_taker": {
              "type": "string"
            },
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "inactive_list_by_maker"
      ],
      "properties": {
        "inactive_list_by_maker": {
          "type": "object",
          "required": [
            "maker"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "maker": {
              "type": "string"
            },
            "start_after": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "inactive_list_by_taker"
      ],
      "properties": {
        "inactive_list_by_taker": {
          "type": "object",
          "required": [
            "taker"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "taker": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Reverse order.",
      "type": "object",
      "required": [
        "list_reverse"
      ],
      "properties": {
        "list_reverse": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_before": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "list_by_desired_taker_reverse"
      ],
      "properties": {
        "list_by_desired_taker_reverse": {
          "type": "object",
          "required": [
            "desired_taker"
          ],
          "properties": {
            "desired_taker": {
              "type": "string"
            },
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_before": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "list_by_maker_reverse"
      ],
      "properties": {
        "list_by_maker_reverse": {
          "type": "object",
          "required": [
            "maker"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "maker": {
              "type": "string"
            },
            "start_before": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "list_by_taker_reverse"
      ],
      "properties": {
        "list_by_taker_reverse": {
          "type": "object",
          "required": [
            "taker"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_before": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "taker": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "BidOffset": {
      "description": "Offset for bid pagination",
      "type": "object",
      "required": [
        "amount",
        "bidder"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "bidder": {
          "type": "string"
        }
      }
    },
    "BidOffsetTime": {
      "description": "Time Offset for bid pagination",
      "type": "object",
      "required": [
        "bidder",
        "time"
      ],
      "properties": {
        "bidder": {
          "type": "string"
        },
        "time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "BidStatus": {
      "type": "string",
      "enum": [
        "Initial",
        "Failed",
        "Cancelled",
        "Executed",
        "Placed"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
